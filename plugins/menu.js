const fs = require('fs');
const config = require('../settings');
const { lite, commands } = require('../lite');
const axios = require('axios');
const { getPrefix } = require('../lib/prefix');
const { runtime } = require('../lib/functions');
const moment = require("moment-timezone"); // Use timezone-aware moment


lite({
    pattern: "menu",
    react: "üëÅÔ∏è",
    alias: ["allmenu"],
    desc: "Awaken the Shadow Menu",
    category: "main",
    filename: __filename
},
async (conn, mek, m, {
    from, quoted, pushname, reply
}) => {
    try {
        let menu = {
            download: '', group: '', fun: '', owner: '',
            ai: '', anime: '', convert: '', reaction: '',
            main: '', logo: '', settings: '', other: ''
        };

        for (let i = 0; i < commands.length; i++) {
            let cmd = commands[i];
            if (cmd.pattern && !cmd.dontAddCommandList && menu.hasOwnProperty(cmd.category)) {
                menu[cmd.category] += `‚îÇ ‚öîÔ∏è ${cmd.pattern}\n`;
            }
        }
        const currentTime = moment().tz("Africa/Harare").format("HH:mm:ss");
        const currentDate = moment().tz("Africa/Harare").format("dddd, MMMM Do YYYY");
        const prefix = getPrefix();

        let madeMenu = `
‚ï≠‚îÄ‚ùç ‚öîÔ∏è ùêíùêîùêáùêé ùêåùêÉ ‚ùç
‚îÇ üßë‚Äçüíª  ú·¥ú…¥·¥õ·¥á Ä: ${pushname}
‚îÇ üåë ·¥ç·¥è·¥Ö·¥á: [${config.MODE}]
‚îÇ üìñ ·¥ò Ä·¥á“ì…™x: [${prefix}]
‚îÇ ‚è≥ ·¥õ…™·¥ç·¥á   : ${currentTime}
‚îÇ üìÜ ·¥Ö·¥Ä·¥õ·¥á   : ${currentDate}
‚îÇ ‚ôæÔ∏è ·¥ú·¥ò·¥õ…™·¥ç·¥á : ${runtime(process.uptime())}
‚îÇ ü©∏ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös: ${commands.length}
‚îÇ üëÅÔ∏è ·¥è·¥°…¥·¥á Ä: ·¥ç Ä s·¥ú…¥…¢ 
‚îÇ ‚ö° ·¥†·¥á Äs…™·¥è…¥: ${config.version}-·¥Ä ü·¥ò ú·¥Ä
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé ü©∏ s ú·¥Ä·¥Ö·¥è·¥° ·¥ç·¥Ä…™…¥ ·¥Ñ·¥ç·¥Ös „Äè
${menu.main || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä Ä·¥õ…™Íú∞·¥Ä·¥Ñ·¥õs „Äè
${menu.download || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üßë‚Äçüíª ·¥è·¥°…¥·¥á ÄÍú± ·¥Ö·¥è·¥ç…™…¥…™·¥è…¥ „Äè
${menu.owner || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üß† ·¥Ä…™  Ä…™·¥õ·¥ú·¥Ä üÍú± „Äè
${menu.ai || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üë• …¢·¥ú…™ ü·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös „Äè
${menu.group || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé ‚ú® ·¥Ä…¥…™·¥ç·¥á /  ü·¥è…¢·¥è Íú±·¥ò·¥á ü üs „Äè
${menu.anime || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üîÑ ·¥Ñ·¥è…¥·¥†·¥á ÄÍú±…™·¥è…¥Íú± „Äè
${menu.convert || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üé≠  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥Ä ô…™ ü…™·¥õ…™·¥ás „Äè
${menu.reaction || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üéâ Íú∞·¥ú…¥  Ä·¥á ü…™·¥Ñs „Äè
${menu.fun || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üé®  ü·¥è…¢·¥è Íú±·¥ò·¥á ü üÍú± „Äè
${menu.logo || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé ü™Ñ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±  Ä…™·¥õ·¥ú·¥Ä üÍú± „Äè
${menu.settings || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

‚îå‚îÄ‚îÄ„Äé üëÅÔ∏è ·¥è·¥õ ú·¥á Ä ·¥Ä ô…™ ü…™·¥õ…™·¥ás „Äè
${menu.other || '‚îÇ (No commands found)'}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

> ${config.DESCRIPTION}
`;

        await conn.sendMessage(
            from,
            {
                image: { url: config.MENU_IMAGE_URL },
                caption: madeMenu,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363402507750390@newsletter',
                        newsletterName: 's·¥ú…¥…¢ s·¥ú ú·¥è ·¥ç·¥Ö',
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );


        await conn.sendMessage(from, {
            audio: fs.readFileSync('./all/menu.m4a'),
            mimetype: 'audio/mp4',
            ptt: true
        }, { quoted: mek });

    } catch (e) {
        console.error(e);
        reply(`${e}`);
    }
});
